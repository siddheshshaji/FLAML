"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[603],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,d=f["".concat(p,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},648:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_label:"utils",title:"nlp.utils"},p=void 0,c={unversionedId:"reference/nlp/utils",id:"reference/nlp/utils",isDocsHomePage:!1,title:"nlp.utils",description:"format\\_vars",source:"@site/docs/reference/nlp/utils.md",sourceDirName:"reference/nlp",slug:"/reference/nlp/utils",permalink:"/FLAML/docs/reference/nlp/utils",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/nlp/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"nlp.utils"},sidebar:"referenceSideBar",previous:{title:"trainer",permalink:"/FLAML/docs/reference/nlp/huggingface/trainer"},next:{title:"autovw",permalink:"/FLAML/docs/reference/onlineml/autovw"}},s=[{value:"format_vars",id:"format_vars",children:[],level:4},{value:"HPOArgs Objects",id:"hpoargs-objects",children:[],level:2}],u={toc:s};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"format_vars"},"format","_","vars"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def format_vars(resolved_vars: Dict) -> str\n")),(0,a.kt)("p",null,"Formats the resolved variable dict into a single string."),(0,a.kt)("h2",{id:"hpoargs-objects"},"HPOArgs Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass\nclass HPOArgs()\n")),(0,a.kt)("p",null,"The HPO setting."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("p",null,"  output_dir (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"str"),"):\ndata root directory for outputing the log, etc.\nmodel_path (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"str"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,a.kt)("inlineCode",{parentName:"p"},"facebook/muppet-roberta-base"),"):\nA string, the path of the language model file, either a path from huggingface\nmodel card huggingface.co/models, or a local path for the model\nfp16 (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"):\nA bool, whether to use FP16\nmax_seq_length (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,a.kt)("inlineCode",{parentName:"p"},"128"),"):\nAn integer, the max length of the sequence\npad_to_max_length (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"):\nA bool, whether to pad all samples to model maximum sentence length\nckpt_per_epoch (:obj:",(0,a.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"optional"),", defaults to :obj:",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"):\nAn integer, the number of checkpoints per epoch"))}f.isMDXComponent=!0}}]);